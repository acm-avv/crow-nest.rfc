import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:lost_and_found_app/firebase_options.dart'; // This file is generated by flutterfire configure
import 'package:lost_and_found_app/screens/auth_screen.dart';
import 'package:lost_and_found_app/screens/home_screen.dart';
import 'package:lost_and_found_app/services/auth_service.dart'; // Import your auth service
import 'package:provider/provider.dart'; // For state management (recommended for user stream)

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Using Provider to expose the AuthService stream to the widget tree
    return StreamProvider<User?>.value(
      value: AuthService().user, // Listen to the auth state changes
      initialData: null, // Initial data before stream emits
      child: MaterialApp(
        title: 'Lost and Found App',
        theme: ThemeData(
          primarySwatch: Colors.blue,
          visualDensity: VisualDensity.adaptivePlatformDensity,
        ),
        home: Wrapper(), // Wrapper decides which screen to show
      ),
    );
  }
}

class Wrapper extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final user = Provider.of<User?>(context); // Get the current user from the stream

    // Return either the Home or Auth screen based on auth state
    if (user == null) {
      return AuthScreen(); // User is not logged in
    } else {
      return HomeScreen(); // User is logged in
    }
  }
}
